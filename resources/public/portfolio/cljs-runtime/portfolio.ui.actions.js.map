{"version":3,"sources":["portfolio/ui/actions.cljs"],"mappings":"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","names":["var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","portfolio.ui.actions/assoc-in*","seq50529","G__50530","cljs.core/first","cljs.core/next","self__5711__auto__","m","args","js/Error","cljs.core._EQ_","cljs.core/mod","cljs.core/count","cljs.core.partition","cljs.core.map","cljs.core/every?","cljs.core/vector?","cljs.core.reduce","p__50531","vec__50532","cljs.core.nth","path","v","cljs.core/assoc-in","portfolio.ui.actions/dissoc-in*","seq50539","G__50540","cljs.core.dissoc","vec__50541","seq__50542","cljs.core/seq","first__50543","k","ks","cljs.core/reverse","cljs.core.update_in","cljs.core/dissoc","portfolio.ui.actions/atom?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWatchable","p__50545","map__50546","cljs.core/--destructure-map","cljs.core.get","portfolio.ui.actions/get-page-title","state","selection","document","suffix","G__50547","cljs.core/Keyword","portfolio.ui.actions/go-to-location","location","id","portfolio.ui.routes/get-id","current-scenes","portfolio.ui.collection/get-selected-scenes","portfolio.ui.collection/get-selection","layout","portfolio.ui.layout/get-view-layout","lp","portfolio.ui.layout/get-layout-path","expansions","portfolio.ui.scene-browser/get-expanded-path","p1__50548#","cljs.core.remove","cljs.core.get_in","cljs.core.mapcat","portfolio.ui.document/get-document","portfolio.ui.routes/get-document-id","G__50550","portfolio.ui.layout/get-current-layout-path","cljs.core.into","cljs.core.concat","cljs.core.filter","p__50551","map__50552","on-unmount","params","title","or__5002__auto__","p__50557","map__50558","on-mount","portfolio.ui.scene/get-scene-atoms","portfolio.ui.routes.get_url","G__50561","portfolio.ui.actions/remove-scene-param","scene-id","param","cljs.core/map?","G__50568","portfolio.ui.actions/set-scene-param","cljs.core/deref","G__50572","cljs.core/not","G__50576","p__50577","map__50578","portfolio.ui.actions/search","index","q","portfolio.ui.search.protocols/query","portfolio.ui.actions/process-action-result!","app","res","log","cljs.core/println","_args","seq__50579","chunk__50580","count__50581","i__50582","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","ref","G__50587","G__50588","G__50589","G__50590","cljs.core.pr_str","cljs.core/remove-watch","seq__50591","chunk__50592","count__50593","i__50594","vec__50613","seq__50614","first__50615","vec__50622","seq__50623","first__50624","t","f","e50617","e50625","G__50620","G__50621","G__50628","G__50629","cljs.core.apply","e","G__50618","G__50619","G__50626","G__50627","portfolio.ui.actions/execute-action!","cljs.core/name","seq__50630","chunk__50631","count__50632","i__50633","G__50638","G__50639","G__50640","G__50641","cljs.core/add-watch","_","cljs.core.swap_BANG_","cljs.core/update","cljs.core.fnil","cljs.core/inc","url","portfolio.ui.routes/get-current-url","js/history","js/requestAnimationFrame","el","G__50642","js/location.hash","cljs.core.subs","cljs.core/not-empty","js/document.getElementById","G__50643","js/document.title","G__50644","G__50645","G__50646","G__50647","seq__50649","chunk__50650","count__50651","i__50652","action","vec__50653","vec__50656","cljs.core/reset!","paths","portfolio.ui.css/load-css-files","portfolio.ui.css/replace-loaded-css-files","portfolio.ui.actions/save-in-local-storage","js/localStorage","cljs.core.println","G__50659","cljs.core/rest","vec__50660","seq__50661","first__50662","fn","portfolio.ui.routes/get-current-location","vec__50663","portfolio.ui.actions/available-actions","portfolio.ui.actions/actions?","cljs.core/sequential?","p1__50667#","cljs.core/contains?","portfolio.ui.actions/parse-int","s","n","js/parseInt","cljs.core.not_EQ_","portfolio.ui.actions/get-action","message","e50669","msg","cljs.core.js__GT_clj","cljs.core.keyword","vec__50670","js/JSON.parse","p1__50668#","cljs.core.mapv","G__50673","_e","portfolio.ui.actions/actionize-data","data","clojure.walk/prewalk","p__50674","vec__50675","cljs.core/tree-seq","cljs.core/coll?","cljs.core/identity","seq__50678","chunk__50679","count__50680","i__50681","ax","G__50686","G__50690","G__50687","G__50691","portfolio.ui.actions/dispatch","p__50699","vec__50734","seq50696","G__50697","G__50698","actions"],"sourcesContent":["(ns portfolio.ui.actions\n  (:require [clojure.walk :as walk]\n            [portfolio.ui.collection :as collection]\n            [portfolio.ui.css :as css]\n            [portfolio.ui.document :as document]\n            [portfolio.ui.layout :as layout]\n            [portfolio.ui.routes :as routes]\n            [portfolio.ui.scene :as scene]\n            [portfolio.ui.scene-browser :as scene-browser]\n            [portfolio.ui.search.protocols :as search]))\n\n(defn assoc-in*\n  \"Takes a map and pairs of path value to assoc-in to the map. Makes `assoc-in`\n  work like `assoc`, e.g.:\n\n  ```clj\n  (assoc-in* {}\n             [:person :name] \\\"Christian\\\"\n             [:person :language] \\\"Clojure\\\")\n  ;;=>\n  {:person {:name \\\"Christian\\\"\n            :language \\\"Clojure\\\"}}\n  ```\"\n  [m & args]\n  (assert (= 0 (mod (count args) 2)) \"assoc-in* takes a map and pairs of path value\")\n  (assert (->> args (partition 2) (map first) (every? vector?)) \"each path should be a vector\")\n  (->> (partition 2 args)\n       (reduce (fn [m [path v]]\n                 (assoc-in m path v)) m)))\n\n(defn dissoc-in*\n  \"Takes a map and paths to dissoc from it. An example explains it best:\n\n  ```clj\n  (dissoc-in* {:person {:name \\\"Christian\\\"\n                        :language \\\"Clojure\\\"}}\n              [:person :language])\n  ;;=>\n  {:person {:name \\\"Christian\\\"}}\n  ```\n\n  Optionally pass additional paths.\n  \"\n  [m & args]\n  (reduce (fn [m path]\n            (cond\n              (= 0 (count path)) m\n              (= 1 (count path)) (dissoc m (first path))\n              :else (let [[k & ks] (reverse path)]\n                      (update-in m (reverse ks) dissoc k))))\n          m args))\n\n(defn atom? [x]\n  (satisfies? cljs.core/IWatchable x))\n\n(defn get-page-title [state {:keys [selection document]}]\n  (let [suffix (when (:title state) (str \" - \" (:title state)))]\n    (cond\n      (:target selection)\n      (case (:kind selection)\n        :scene (str \"Scene: \" (:title (:target selection)) suffix)\n        :collection (str \"Collection: \" (:title (:target selection)) suffix))\n\n      document\n      (:title document)\n\n      :else\n      (str \"No scenes found\" suffix))))\n\n(defn go-to-location [state location]\n  (let [id (routes/get-id (:location state))\n        current-scenes (collection/get-selected-scenes state id)\n        selection (collection/get-selection state (routes/get-id location))\n        layout (layout/get-view-layout state selection)\n        lp (layout/get-layout-path layout)\n        expansions (->> (:path selection)\n                        (map scene-browser/get-expanded-path)\n                        (remove #(get-in state %))\n                        (mapcat (fn [path] [path true])))\n        document (when (nil? id)\n                   (document/get-document (routes/get-document-id location)))]\n    {:assoc-in (cond-> [[:location] location\n                        (layout/get-current-layout-path) lp]\n                 (nil? (get-in state lp)) (into [lp layout])\n                 (seq expansions) (into expansions))\n     :fns (concat\n           (->> (filter :on-unmount current-scenes)\n                (map (fn [{:keys [on-unmount params id title]}]\n                       [:on-unmount (or id title) on-unmount params])))\n           (->> (filter :on-mount (:scenes selection))\n                (map (fn [{:keys [on-mount params id title]}]\n                       [:on-mount (or id title) on-mount params]))))\n     :release (mapcat scene/get-scene-atoms current-scenes)\n     :subscribe (mapcat scene/get-scene-atoms (:scenes selection))\n     :set-page-title (get-page-title state {:selection selection :document document})\n     :update-window-location (routes/get-url location)}))\n\n(defn remove-scene-param\n  ([state scene-id]\n   (let [param (get-in state [:scenes scene-id :param])]\n     (cond\n       (map? param)\n       {:actions [[:dissoc-in [:ui scene-id :overrides]]]}\n\n       (atom? param)\n       {:reset [param (get-in state [:ui scene-id :original])]\n        :actions [[:dissoc-in [:ui scene-id :overrides]]\n                  [:dissoc-in [:ui scene-id :original]]]})))\n  ([state scene-id k]\n   (let [param (get-in state [:scenes scene-id :param])]\n     (cond\n       (map? param)\n       {:actions [[:dissoc-in [:ui scene-id :overrides k]]]}\n\n       (atom? param)\n       {:swap [param [k] (get-in state [:scenes scene-id :original k])]\n        :actions [[:dissoc-in [:ui scene-id :overrides k]]\n                  [:dissoc-in [:ui scene-id :original k]]]}))))\n\n(defn set-scene-param\n  ([state scene-id v]\n   (let [param (get-in state [:scenes scene-id :param])]\n     (cond\n       (map? param)\n       {:actions [[:assoc-in [:ui scene-id :overrides] v]]}\n\n       (atom? param)\n       {:reset [param v]\n        :actions [[:assoc-in [:ui scene-id :overrides] v]\n                  [:assoc-in [:ui scene-id :original] @param]]})))\n  ([state scene-id k v]\n   (let [param (get-in state [:scenes scene-id :param])]\n     (cond\n       (map? param)\n       {:actions [[:assoc-in [:ui scene-id :overrides k] v]]}\n\n       (atom? param)\n       {:swap [param [k] v]\n        :actions (cond-> [[:assoc-in [:ui scene-id :overrides k] v]]\n                   (not (get-in state [:ui scene-id :original k]))\n                   (into [[:assoc-in [:ui scene-id :original k] (k @param)]]))}))))\n\n(defn search [{:keys [index]} q]\n  (when index\n    {:assoc-in [[:search/suggestions] (search/query index q)]}))\n\n(declare execute-action!)\n\n(defn process-action-result! [app res]\n  (let [log (if (:log? @app)\n              println\n              (fn [& _args]))]\n    (doseq [ref (:release res)]\n      (log \"Stop watching atom\" (pr-str ref))\n      (remove-watch ref ::portfolio))\n    (doseq [[k t f & args] (:fns res)]\n      (try\n        (log (str \"Calling \" k \" on \" t \" with\") (pr-str args))\n        (apply f args)\n        (catch :default e\n          (execute-action!\n           app\n           [:assoc-in [:error]\n            {:exception e\n             :cause (str k \" on \" (name t) \" threw exception\")\n             :data [(when (seq args)\n                      {:label \"arguments\"\n                       :data args})]}]))))\n    (doseq [ref (:subscribe res)]\n      (log \"Start watching atom\" (pr-str ref))\n      (add-watch ref ::portfolio\n        (fn [_ _ _ _]\n          (swap! app update :heartbeat (fnil inc 0)))))\n    (when-let [url (:update-window-location res)]\n      (when-not (= url (routes/get-current-url))\n        (log \"Updating browser URL to\" url)\n        (.pushState js/history false false url))\n      (js/requestAnimationFrame\n       #(when-let [el (some-> js/location.hash (subs 1) not-empty js/document.getElementById)]\n          (.scrollIntoView el))))\n    (when-let [title (:set-page-title res)]\n      (log (str \"Set page title to '\" title \"'\"))\n      (set! js/document.title title))\n    (when (or (:dissoc-in res) (:assoc-in res))\n      (when (:assoc-in res)\n        (log \":assoc-in\" (pr-str (:assoc-in res))))\n      (when (:dissoc-in res)\n        (log \":dissoc-in\" (pr-str (:dissoc-in res))))\n      (swap! app (fn [state]\n                   (apply assoc-in*\n                          (apply dissoc-in* state (:dissoc-in res))\n                          (:assoc-in res)))))\n    (doseq [action (:actions res)]\n      (execute-action! app action))\n    (when-let [[ref path v] (:swap res)]\n      (swap! ref assoc-in path v))\n    (when-let [[ref v] (:reset res)]\n      (reset! ref v))\n    (when-let [paths (:load-css-files res)]\n      (css/load-css-files paths))\n    (when-let [paths (:replace-css-files res)]\n      (css/replace-loaded-css-files paths))))\n\n(defn save-in-local-storage [k v]\n  (.setItem js/localStorage (str k) (pr-str v)))\n\n(defn execute-action! [app action]\n  (when (:log? @app)\n    (println \"execute-action!\" action))\n  (process-action-result!\n   app\n   (case (first action)\n     :assoc-in {:assoc-in (rest action)}\n     :dissoc-in {:dissoc-in (rest action)}\n     :fn/call (let [[fn & args] (rest action)] (apply fn args))\n     :go-to-location (apply go-to-location @app (rest action))\n     :go-to-current-location (go-to-location @app (routes/get-current-location))\n     :set-css-files (let [[paths] (rest action)]\n                      {:assoc-in [[:css-paths] paths]\n                       :load-css-files paths\n                       :replace-css-files paths})\n     :remove-scene-param (apply remove-scene-param @app (rest action))\n     :save-in-local-storage (apply save-in-local-storage (rest action))\n     :set-scene-param (apply set-scene-param @app (rest action))\n     :search (apply search @app (rest action))))\n  app)\n\n(def available-actions\n  #{:assoc-in :dissoc-in :go-to-location :go-to-current-location\n    :remove-scene-param :set-scene-param :fn/call :event/prevent-default\n    :search :save-in-local-storage})\n\n(defn actions? [x]\n  (and (sequential? x)\n       (seq x)\n       (every? #(and (sequential? %)\n                     (contains? available-actions (first %))) x)))\n\n(defn parse-int [s]\n  (let [n (js/parseInt s 10)]\n    (if (not= n n)\n      ;; NaN!\n      0\n      n)))\n\n(defn get-action [message]\n  (try\n    (let [msg (js->clj message :keywordize-keys true)]\n      (when (:action msg)\n        (let [action (keyword (:action msg))]\n          (into\n           [action]\n           (cond\n             (= :assoc-in action)\n             (let [[path v] (js->clj (js/JSON.parse (:data msg)) :keywordize-keys true)]\n               [(->> path\n                     (mapv #(cond-> %\n                              (string? %) keyword)))\n                v]))))))\n    (catch :default _e\n      nil)))\n\n(defn actionize-data\n  \"Given a Portfolio `app` instance and some prepared data to render, wrap\n  collections of actions in a function that executes these actions. Using this\n  function makes it possible to prepare event handlers as a sequence of action\n  tuples, and have them seemlessly emitted as actions in the components.\n\n  If you need to access the `.-value` of the event target (e.g. for on-change on\n  input fields, etc), use `:event.target/value` as a placeholder in your action,\n  and it will be replaced with the value.\"\n  [app data]\n  (walk/prewalk\n   (fn [x]\n     (if (actions? x)\n       (fn [e & [data]]\n         (when (->> (tree-seq coll? identity x)\n                    (filter #{[:event/prevent-default]})\n                    seq)\n           (.preventDefault e)\n           (.stopPropagation e))\n         (doseq [action (remove #{[:event/prevent-default]} x)]\n           (execute-action!\n            app\n            (walk/prewalk\n             (fn [ax]\n               (cond\n                 (get data ax)\n                 (get data ax)\n\n                 (= :event.target/value ax)\n                 (some-> e .-target .-value)\n\n                 (= :event.target/number-value ax)\n                 (some-> e .-target .-value parse-int)\n\n                 :else ax))\n             action))))\n       x))\n   data))\n\n(defn dispatch [actions e & [data]]\n  ;; Dispatch asynchronously to avoid triggering a render within an ongoing\n  ;; render.\n  (js/requestAnimationFrame #(actions e data)))\n"],"x_google_ignoreList":[0]}