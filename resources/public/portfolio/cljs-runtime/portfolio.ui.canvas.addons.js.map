{"version":3,"sources":["portfolio/ui/canvas/addons.cljs"],"mappings":"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","names":["portfolio.ui.canvas.addons/get-tool-id","tool","or__5002__auto__","portfolio.ui.canvas.addons/get-persisted-value","e50474","G__50475","js/localStorage","cljs.core/not-empty","cljs.reader.read_string","_e","portfolio.ui.canvas.addons/get-default-value","portfolio.ui.canvas.addons/get-global-value","state","cljs.core.get_in","portfolio.ui.canvas.addons/get-pane-value","pane-id","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","portfolio.ui.canvas.addons/get-tool-value","p__50484","vec__50486","cljs.core.nth","seq50480","G__50481","cljs.core/first","cljs.core/next","G__50482","self__5711__auto__","cljs.core.merge","p__50492","map__50493","cljs.core/--destructure-map","cljs.core.get","portfolio.ui.canvas.addons/get-current-value","pane-options","temp__5823__auto__","ks","cljs.core.map","cljs.core.filter","cljs.core/map?","cljs.core.mapcat","cljs.core/keys","cljs.core/seq","cljs.core/select-keys","portfolio.ui.canvas.addons.get_tool_value","portfolio.ui.canvas.addons/get-set-actions","v","id","global?","portfolio.ui.layout/split-screen?","G__50501","cljs.core.conj","and__5000__auto__","portfolio.ui.canvas.addons/get-clear-actions","G__50502","portfolio.ui.canvas.addons/get-expand-path","vid","p__50511","vec__50512","portfolio.ui.canvas.addons/get-custom-tool-source-title","source","G__50515","cljs.core/Keyword","js/Error","portfolio.ui.canvas.addons/prepare-tool-menu","pane","current-value","custom-options","cljs.core/contains?","cljs.core/set","iter__5480__auto__","s__50522","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__50524","cljs.core/chunk-buffer","i__50523","map__50525","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50521","cljs.core/chunk-rest","map__50526","cljs.core/cons","cljs.core/rest","title","value","disabled?","cljs.core.concat","selected?","cljs.core._EQ_","cljs.core/ifn?","cljs.core.remove","cljs.core/nil?","portfolio.ui.canvas.addons/get-tool-title","f","G__50527","portfolio.ui.canvas.addons/prepare-toolbar-menu-button","expand-path","expanded?","portfolio.ui.components.canvas-toolbar-buttons/MenuButton","cljs.core/with-meta","portfolio.ui.canvas.addons/create-toolbar-menu-button","data","missing","cljs.core.comp","G__50528","cljs.core.dissoc","cljs.core.assoc","_","portfolio.ui.canvas.addons/create-canvas-extension","portfolio.ui.canvas.addons/create-action-button","seq__50535","chunk__50536","count__50537","i__50538","c__5525__auto__","cljs.core/chunk-first","k","cljs.core.ex_info","show?","cljs.core/constantly","options","fexpr__50566"],"sourcesContent":["(ns portfolio.ui.canvas.addons\n  (:require [cljs.reader :as r]\n            [portfolio.ui.canvas.protocols :as canvas]\n            [portfolio.ui.components.canvas-toolbar-buttons :refer [MenuButton]]\n            [portfolio.ui.layout :as layout]))\n\n(defn get-tool-id [tool]\n  (str (or (:group-id tool) (:id tool)) (:persist-key tool)))\n\n(defn get-persisted-value [tool]\n  (try\n    (some->> (str (get-tool-id tool))\n             (.getItem js/localStorage)\n             not-empty\n             r/read-string)\n    (catch :default _e\n      nil)))\n\n(defn get-default-value [tool]\n  (or (when (:persist? tool)\n        (get-persisted-value tool))\n      (:default-value tool)))\n\n(defn get-global-value [state tool]\n  (get-in state [:tools (get-tool-id tool) :value]))\n\n(defn get-pane-value [state tool pane-id]\n  (get-in state [:panes pane-id (get-tool-id tool) :value]))\n\n(defn get-tool-value [state tool & [pane-id]]\n  (merge (get-global-value state tool)\n         (when pane-id\n           (get-pane-value state tool pane-id))))\n\n(defn get-current-value [state tool {:keys [pane-id pane-options]}]\n  (or (when-let [ks (->> (:options tool)\n                         (map :value)\n                         (filter map?)\n                         (mapcat keys)\n                         seq)]\n        (not-empty (select-keys pane-options ks)))\n      (get-tool-value state tool pane-id)\n      (get-default-value tool)))\n\n(defn get-set-actions [state tool pane-id v]\n  (let [id (get-tool-id tool)\n        global? (or (:global? tool) (not (layout/split-screen? state)))]\n    (cond-> [[:assoc-in [:panes pane-id id :value] v]]\n      global? (conj [:assoc-in [:tools id :value] v])\n      (and global? (:persist? tool)) (conj [:save-in-local-storage id v]))))\n\n(defn get-clear-actions [state tool pane-id]\n  (let [id (get-tool-id tool)\n        global? (not (layout/split-screen? state))]\n    (cond-> [[:dissoc-in [:panes pane-id id :value]]]\n      global? (conj [:dissoc-in [:tools id :value]])\n      (and global? (:persist? tool)) (conj [:save-in-local-storage id nil]))))\n\n(defn get-expand-path [vid]\n  [:canvas/tools vid :expanded])\n\n(defn get-custom-tool-source-title [[source]]\n  (case source\n    :scene \"Scene config\"\n    :collection \"Collection config\"\n    :state-layout \"Global config\"\n    :view \"Canvas config\"\n    :portfolio.ui.layout/gallery-default \"Default config (gallery)\"\n    :portfolio.ui.layout/default \"Default config\"))\n\n(defn prepare-tool-menu [tool state pane]\n  (let [current-value (get-current-value state tool pane)\n        custom-options (when (and current-value\n                                  (not (contains? (set (map :value (:options tool))) current-value)))\n                         [{:title (get-custom-tool-source-title (:config-source pane))\n                           :value current-value\n                           :disabled? true}])]\n    {:options\n     (for [{:keys [title value disabled?]} (concat (:options tool) custom-options)]\n       (let [selected? (= value current-value)]\n         {:title title\n          :selected? selected?\n          :actions (when-not disabled?\n                     (->> [[:dissoc-in (get-expand-path (:pane-id pane))]]\n                          (concat\n                           (if selected?\n                             (get-clear-actions state tool (:pane-id pane))\n                             (get-set-actions state tool (:pane-id pane) value)))\n                          (concat\n                           [(when (ifn? (:on-select tool))\n                              [:fn/call (:on-select tool) value])])\n                          (remove nil?)))}))}))\n\n(defn get-tool-title [state tool pane]\n  (or (when (ifn? (:prepare-title tool))\n        (let [f (:prepare-title tool)]\n          (f (get-current-value state tool pane))))\n      (:title tool)))\n\n(defn prepare-toolbar-menu-button [tool state pane]\n  (let [expand-path (get-expand-path (:pane-id pane))\n        expanded? (= (:id tool) (get-in state expand-path))]\n    (with-meta\n      {:text (when-not (:icon tool)\n               (get-tool-title state tool pane))\n       :icon (:icon tool)\n       :title (when (:icon tool)\n                (get-tool-title state tool pane))\n       :actions (if expanded?\n                  [[:dissoc-in expand-path]]\n                  [[:assoc-in expand-path (:id tool)]])\n       :menu (when expanded?\n               (prepare-tool-menu tool state pane))}\n      {`canvas/render-toolbar-button #'MenuButton})))\n\n(defn create-toolbar-menu-button [data]\n  (let [missing (filter (comp nil? data) #{:id :title :options :prepare-canvas})]\n    (with-meta\n      (cond-> (dissoc data :prepare-canvas)\n        (seq missing)\n        (assoc :problems [{:problem :missing-keys\n                           :data (set missing)\n                           :message \"Can't create toolbar menu button without keys\"}]))\n      {`canvas/prepare-toolbar-button #'prepare-toolbar-menu-button\n       `canvas/get-tool-value (fn [tool state pane-id] (get-tool-value state tool pane-id))\n       `canvas/prepare-canvas (or (:prepare-canvas data) (fn [_ _ _]))\n       `canvas/finalize-canvas (or (:finalize-canvas data) (fn [_ _ _]))})))\n\n(defn create-canvas-extension [data]\n  (assert (:id data) \"Can't create viewport extension without :id\")\n  (assert (or (:prepare-canvas data)\n              (:finalize-canvas data)) \"Can't create viewport extension without neither :prepare-canvas nor :finalize-canvas\")\n  (with-meta\n    data\n    {`canvas/prepare-canvas (or (:prepare-canvas data) (fn [_ _ _]))\n     `canvas/finalize-canvas (or (:finalize-canvas data) (fn [_ _ _]))}))\n\n(defn create-action-button [data]\n  (doseq [k #{:title :get-actions :prepare-canvas}]\n    (when-not (k data)\n      (throw (ex-info \"Can't create toolbar action button without key\"\n                      {:k k :data data}))))\n  (let [show? (or (:show? data) (constantly true))]\n    (with-meta\n      (dissoc data :show? :get-actions :prepare-canvas)\n      {`canvas/prepare-toolbar-button\n       (fn [tool state options]\n         (when (show? tool state options)\n           (with-meta\n             {:text (when-not (:icon data) (:title data))\n              :title (:title data)\n              :icon (:icon data)\n              :actions ((:get-actions data) tool state options)}\n             {`canvas/render-toolbar-button #'MenuButton})))})))\n"],"x_google_ignoreList":[0]}