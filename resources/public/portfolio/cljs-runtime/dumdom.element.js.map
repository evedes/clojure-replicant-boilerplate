{"version":3,"sources":["dumdom/element.cljc"],"mappings":"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","names":["dumdom.element/*handle-event*","dumdom.element/event-handler","h","cljs.core/fn?","temp__5821__auto__","f","e","dumdom.element/event-entry","attrs","k","clojure.string/replace","cljs.core/name","dumdom.element/camelCase","s","vec__47469","seq__47470","cljs.core/seq","first__47471","cljs.core/first","cljs.core/next","rest","clojure.string.split","clojure.string.join","cljs.core.map","clojure.string/capitalize","dumdom.element/camel-key","n","cljs.core/re-find","cljs.core.keyword","dumdom.element/skip-pixelize-attrs","cljs.core.mapcat","cljs.core/set","dumdom.element/normalize-styles","styles","cljs.core.reduce","p__47492","vec__47493","cljs.core.nth","m","attr","v","cljs.core.update","cljs.core/str","dumdom.element/attr-mappings","p__47548","vec__47549","dumdom.element/data-attr?","dumdom.element/event-handler?","attr-name","dumdom.element/prep-attrs","dataset","cljs.core.filter","p__47670","vec__47671","cljs.core.into","cljs.core.remove","p__47678","vec__47680","p__47674","vec__47675","_k","clojure.set/rename-keys","event-keys","cljs.core/keys","el-key","or__5002__auto__","cljs.core/contains?","cljs.core/hash","G__47686","cljs.core.apply","cljs.core/dissoc","G__47687","cljs.core.assoc","cljs.core.merge","temp__5823__auto__","enter","remove","destroy","p1__47611#","cljs.core.mapv","p1__47616#","callback","G__47697","dumdom.element/hiccup?","sexp","cljs.core/vector?","cljs.core/map-entry?","cljs.core/Keyword","dumdom.element/class-list","classes","cljs.core/empty?","cljs.core/coll?","p1__47704#","cljs.core.ex_info","dumdom.element/parse-hiccup-symbol","sym","vec__47709","vec__47712","seq__47713","first__47714","_","id","el","cljs.core.concat","G__47715","cljs.core.dissoc","p1__47708#","cljs.core.conj","dumdom.element/explode-styles","p1__47716#","vec__47717","clojure.string/trim","dumdom.element/prep-hiccup-attrs","G__47720","dumdom.element/flatten-seqs","xs","G__47732","vec__47733","seq__47734","first__47735","vec__47740","seq__47741","first__47742","res","x","cljs.core/seq?","dumdom.element/add-namespace","vnode","G__47744","cljs.core.not_EQ_","cljs.core/assoc-in","p1__47743#","dumdom.element/svg?","sel","cljs.core._EQ_","cljs.core/count","dumdom.element/primitive?","dumdom.element/convert-primitive-children","children","iter__5480__auto__","s__47748","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__47750","cljs.core/chunk-buffer","i__47749","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47747","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","c","dumdom.element/create-vdom-node","cmap?","cljs.core/map?","G__47752","dumdom.element/inflate-hiccup","tag-name","args","vec__47753","element","dumdom.element/create","dumdom.element/enumerate-key","kmap","cljs.core.get","dumdom.element/realize-children","path","ks","child","vec__47765","vec__47768","lk","lk-n","G__47771","G__47776","G__47777","p__47778","map__47779","cljs.core/--destructure-map","dumdom.element/add-comment-node","component-name","render-comments?","component","G__47780","and__5000__auto__","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","seq47784","G__47785","G__47786","self__5711__auto__","fullpath","G__47787","_old-vnode","new-vnode","seq__47788","chunk__47789","count__47790","i__47791","c__5525__auto__","cljs.core/chunk-first","node","p1__47781#","G__47795","fexpr__47796","fexpr__47798","seq__47799","chunk__47800","count__47801","i__47802","p1__47782#","G__47808","fexpr__47809","fexpr__47816","p1__47783#"],"sourcesContent":["(ns dumdom.element\n  (:require [clojure.set :as set]\n            [clojure.string :as str]))\n\n(def ^:dynamic *handle-event* nil)\n\n(defn event-handler [h]\n  (if (fn? h)\n    h\n    (if-let [f *handle-event*]\n      ;; At this point we need to \"early\" bind the late bound var. It made it\n      ;; this far, but now it must be frozen in time, so it sticks around for\n      ;; the asynchronous events it will handle after being rendered to the DOM.\n      (fn [e]\n        (f e h))\n      (when (string? h)\n        ;; Strings could be inline JavaScript, so will be allowed when there is\n        ;; no global event handler.\n        h))))\n\n(defn- event-entry [attrs k]\n  [(.toLowerCase (str/replace (name k) #\"^on\" \"\"))\n   (event-handler (attrs k))])\n\n(defn- camelCase [s]\n  (let [[f & rest] (str/split s #\"-\")]\n    (str f (str/join \"\" (map str/capitalize rest)))))\n\n(defn- camel-key [k]\n  (let [n (name k)]\n    (if (re-find #\"^aria-\" n)\n      k\n      (keyword (camelCase n)))))\n\n(def ^:private skip-pixelize-attrs\n  (->>\n   [:animation-iteration-count\n    :box-flex\n    :box-flex-group\n    :box-ordinal-group\n    :column-count\n    :fill-opacity\n    :flex\n    :flex-grow\n    :flex-positive\n    :flex-shrink\n    :flex-negative\n    :flex-order\n    :font-weight\n    :line-clamp\n    :line-height\n    :opacity\n    :order\n    :orphans\n    :stop-opacity\n    :stroke-dashoffset\n    :stroke-opacity\n    :stroke-width\n    :tab-size\n    :widows\n    :z-index\n    :zoom]\n   (mapcat (fn [k] [k (camel-key k)]))\n   set))\n\n(defn- normalize-styles [styles]\n  (reduce (fn [m [attr v]]\n            (if (number? v)\n              (if (skip-pixelize-attrs attr)\n                (update m attr str)\n                (update m attr str \"px\"))\n              m))\n          styles\n          styles))\n\n(def ^:private attr-mappings\n  {:acceptCharset :accept-charset\n   :accessKey :accesskey\n   :autoCapitalize :autocapitalize\n   :autoComplete :autocomplete\n   :autoFocus :autofocus\n   :autoPlay :autoplay\n   :bgColor :bgcolor\n   :className :class\n   :codeBase :codebase\n   :colSpan :colspan\n   :contentEditable :contenteditable\n   :contextMenu :contextmenu\n   :crossOrigin :crossorigin\n   :dateTime :datetime\n   :dirName :dirname\n   :dropZone :dropzone\n   :encType :enctype\n   :htmlFor :for\n   :formAction :formaction\n   :hrefLang :hreflang\n   :httpEquiv :http-equiv\n   :isMap :ismap\n   :itemProp :itemprop\n   :keyType :keytype\n   :maxLength :maxlength\n   :minLength :minlength\n   :noValidate :novalidate\n   :placeHolder :placeholder\n   :preLoad :preload\n   :radioGroup :radiogroup\n   :readOnly :readonly\n   :rowSpan :rowspan\n   :spellCheck :spellcheck\n   :srcDoc :srcdoc\n   :srcLang :srclang\n   :srcSet :srcset\n   :tabIndex :tabindex\n   :useMap :usemap\n   :accentHeight :accent-height\n   :alignmentBaseline :alignment-baseline\n   :arabicForm :arabic-form\n   :baselineShift :baseline-shift\n   :capHeight :cap-height\n   :clipPath :clip-path\n   :clipRule :clip-rule\n   :colorInterpolation :color-interpolation\n   :colorInterpolationFilters :color-interpolation-filters\n   :colorProfile :color-profile\n   :colorRendering :color-rendering\n   :dominantBaseline :dominant-baseline\n   :enableBackground :enable-background\n   :fillOpacity :fill-opacity\n   :fillRule :fill-rule\n   :floodColor :flood-color\n   :floodOpacity :flood-opacity\n   :fontFamily :font-family\n   :fontSize :font-size\n   :fontSizeAdjust :font-size-adjust\n   :fontStretch :font-stretch\n   :fontStyle :font-style\n   :fontVariant :font-variant\n   :fontWeight :font-weight\n   :glyphName :glyph-name\n   :glyphOrientationHorizontal :glyph-orientation-horizontal\n   :glyphOrientationVertical :glyph-orientation-vertical\n   :horizAdvX :horiz-adv-x\n   :horizOriginX :horiz-origin-x\n   :imageRendering :image-rendering\n   :letterSpacing :letter-spacing\n   :lightingColor :lighting-color\n   :markerEnd :marker-end\n   :markerMid :marker-mid\n   :markerStart :marker-start\n   :overlinePosition :overline-position\n   :overlineThickness :overline-thickness\n   :panose1 :panose-1\n   :paintOrder :paint-order\n   :pointerEvents :pointer-events\n   :renderingIntent :rendering-intent\n   :shapeRendering :shape-rendering\n   :stopColor :stop-color\n   :stopOpacity :stop-opacity\n   :strikethroughPosition :strikethrough-position\n   :strikethroughThickness :strikethrough-thickness\n   :strokeDasharray :stroke-dasharray\n   :strokeDashoffset :stroke-dashoffset\n   :strokeLinecap :stroke-linecap\n   :strokeLinejoin :stroke-linejoin\n   :strokeMiterlimit :stroke-miterlimit\n   :strokeOpacity :stroke-opacity\n   :strokeWidth :stroke-width\n   :textAnchor :text-anchor\n   :textDecoration :text-decoration\n   :textRendering :text-rendering\n   :underlinePosition :underline-position\n   :underlineThickness :underline-thickness\n   :unicodeBidi :unicode-bidi\n   :unicodeRange :unicode-range\n   :unitsPerEm :units-per-em\n   :vAlphabetic :v-alphabetic\n   :vHanging :v-hanging\n   :vIdeographic :v-ideographic\n   :vMathematical :v-mathematical\n   :vectorEffect :vector-effect\n   :vertAdvY :vert-adv-y\n   :vertOriginX :vert-origin-x\n   :vertOriginY :vert-origin-y\n   :wordSpacing :word-spacing\n   :writingMode :writing-mode\n   :xHeight :x-height\n   :xlinkActuate :xlink:actuate\n   :xlinkArcrole :xlink:arcrole\n   :xlinkHref :xlink:href\n   :xlinkRole :xlink:role\n   :xlinkShow :xlink:show\n   :xlinkTitle :xlink:title\n   :xlinkType :xlink:type\n   :xmlBase :xml:base\n   :xmlLang :xml:lang\n   :xmlSpace :xml:space\n   :mountedStyle :mounted-style\n   :leavingStyle :leaving-style\n   :disappearingStyle :disappearing-style})\n\n(defn data-attr? [[k v]]\n  (re-find #\"^data-\" (name k)))\n\n(defn event-handler? [attr-name]\n  (re-find #\"on[A-Z]\" (name attr-name)))\n\n(defn- prep-attrs [attrs]\n  (let [dataset (->> attrs\n                     (filter data-attr?)\n                     (map (fn [[k v]] [(str/replace (name k) #\"^data-\" \"\") v]))\n                     (into {}))\n        attrs (->> attrs\n                   (remove data-attr?)\n                   (map (fn [[k v]]\n                          (let [attr-name (camel-key k)]\n                            [attr-name (cond\n                                         (true? v) attr-name\n                                         (false? v) nil\n                                         :else v)])))\n                   (remove (fn [[_k v]] (nil? v)))\n                   (into {}))\n        attrs (set/rename-keys attrs attr-mappings)\n        event-keys (filter event-handler? (keys attrs))\n        el-key (or (:key attrs)\n                   (when (contains? attrs :dangerouslySetInnerHTML)\n                     (hash (:dangerouslySetInnerHTML attrs))))]\n    (cond-> {:attrs (apply dissoc attrs :style :mounted-style :leaving-style :disappearing-style\n                           :component :value :key :ref :dangerouslySetInnerHTML event-keys)\n             :props (cond-> {}\n                      (:value attrs) (assoc :value (:value attrs))\n\n                      (contains? (:dangerouslySetInnerHTML attrs) :__html)\n                      (assoc :innerHTML (-> attrs :dangerouslySetInnerHTML :__html)))\n             :style (merge (normalize-styles (:style attrs))\n                           (when-let [enter (:mounted-style attrs)]\n                             {:delayed (normalize-styles enter)})\n                           (when-let [remove (:leaving-style attrs)]\n                             {:remove (normalize-styles remove)})\n                           (when-let [destroy (:disappearing-style attrs)]\n                             {:destroy (normalize-styles destroy)}))\n             :on (->> event-keys\n                      (mapv #(event-entry attrs %))\n                      (into {}))\n             :hook (merge\n                    {}\n                    (when-let [callback (:ref attrs)]\n                      {:insert #(callback (.-elm %))\n                       :destroy #(callback nil)}))\n             :dataset dataset}\n      el-key (assoc :key el-key))))\n\n(declare create)\n\n(defn hiccup? [sexp]\n  (and (vector? sexp)\n       (not (map-entry? sexp))\n       (or (keyword? (first sexp)) (fn? (first sexp)))))\n\n(defn class-list [classes]\n  (cond\n    (keyword? classes) [(name classes)]\n    (string? classes) [classes]\n    (empty? classes) []\n    (coll? classes) (map #(if (keyword? %) (name %) %) classes)\n    (nil? classes) []\n    :else (throw (ex-info \"Received class name that is neither string, keyword, or a collection of those\"\n                          {:classes classes}))))\n\n(defn parse-hiccup-symbol [sym attrs]\n  (let [[_ id] (re-find #\"#([^\\.#]+)\" sym)\n        [el & classes] (-> (str/replace sym #\"#([^#\\.]+)\" \"\")\n                           (str/split #\"\\.\"))\n        classes (->> (concat\n                      (class-list (:class attrs))\n                      (class-list (:className attrs))\n                      classes)\n                     (remove empty?))]\n    [el\n     (cond-> (dissoc attrs :class :className)\n       id (assoc :id id)\n       (seq classes) (update :className #(str/join \" \" (if % (conj classes %) classes))))]))\n\n(defn explode-styles [s]\n  (->> (str/split s #\";\")\n       (map #(let [[k v] (map str/trim (str/split % #\":\"))]\n               [k v]))\n       (into {})))\n\n(defn prep-hiccup-attrs [attrs]\n  (cond-> attrs\n    (string? (:style attrs)) (update :style explode-styles)))\n\n(defn flatten-seqs [xs]\n  (loop [res []\n         [x & xs] xs]\n    (cond\n      (and (nil? xs) (nil? x)) (seq res)\n      (seq? x) (recur (into res (flatten-seqs x)) xs)\n      :else (recur (conj res x) xs))))\n\n(defn add-namespace [vnode]\n  (cond-> vnode\n    (not= \"foreignObject\" (:sel vnode))\n    (assoc-in [:data :ns] \"http://www.w3.org/2000/svg\")\n\n    (:children vnode)\n    (update :children #(map add-namespace %))))\n\n(defn svg? [sel]\n  (and (= \"s\" (nth sel 0))\n       (= \"v\" (nth sel 1))\n       (= \"g\" (nth sel 2))\n       (or (= 3 (count sel))\n           (= \".\" (nth sel 3))\n           (= \"#\" (nth sel 3)))))\n\n(defn primitive? [x]\n  (or (string? x) (number? x)))\n\n(defn convert-primitive-children [children]\n  (for [c children]\n    (if (primitive? c)\n      {:text c}\n      c)))\n\n;; This is a port of Snabbdom's `h` function, but without the varargs support.\n(defn create-vdom-node [sel attrs children]\n  (let [cmap? (map? children)]\n    (cond-> {:sel sel\n             :data (dissoc attrs :key :dumdom/component-key)\n             :dumdom/component-key (:dumdom/component-key attrs)}\n      (primitive? children)\n      (assoc :text children)\n\n      cmap?\n      (assoc :children [children])\n\n      (and (seq? children) (not cmap?))\n      (assoc :children children)\n\n      :always (update :children convert-primitive-children)\n\n      (svg? sel)\n      add-namespace\n\n      (:key attrs)\n      (assoc :key (:key attrs)))))\n\n(defn inflate-hiccup [sexp]\n  (cond\n    (nil? sexp) (create-vdom-node \"!\" {} \"nil\")\n\n    (not (hiccup? sexp)) sexp\n\n    :else\n    (let [tag-name (first sexp)\n          args (rest sexp)\n          args (if (map? (first args)) args (concat [{}] args))]\n      (if (fn? tag-name)\n        (apply tag-name (rest sexp))\n        (let [[element attrs] (parse-hiccup-symbol (name tag-name) (first args))]\n          (apply create element (prep-hiccup-attrs attrs) (flatten-seqs (rest args))))))))\n\n(defn enumerate-key [kmap k]\n  (let [k (if (string? k) k (str k))]\n    [k (get kmap k 0)]))\n\n(defn realize-children [path xs]\n  (loop [xs (seq xs)\n         res []\n         ks {}]\n    (if (nil? xs)\n      (seq res)\n      (let [x (first xs)\n            child (if (fn? x)\n                    (x path ks)\n                    x)]\n        (recur\n         (next xs)\n         (conj res child)\n         (let [[k n] (:dumdom/component-key child)\n               [lk lk-n] (:dumdom/lookup-key child)]\n           (cond-> (assoc ks k (some-> (or n 0) inc))\n             lk (assoc lk (some-> (or lk-n 0) inc)))))))))\n\n(defn add-comment-node [{:dumdom/keys [component-name render-comments?] :as component}]\n  (cond->> [component]\n    (and render-comments? component-name)\n    (cons (create-vdom-node \"!\" {} component-name))))\n\n(defn create [tag-name attrs & children]\n  (fn [path kmap]\n    (let [attrs (prep-attrs attrs)\n          k (enumerate-key kmap (:key attrs))\n          fullpath (conj path k)]\n      (create-vdom-node\n       tag-name\n       (cond-> attrs\n         (:key attrs) (assoc :key (str/join \".\" k))\n\n         k (assoc :dumdom/component-key k)\n\n         :always\n         (assoc-in [:hook :update]\n                   (fn [_old-vnode new-vnode]\n                     (doseq [node (filter #(some-> % .-willEnter) (.-children new-vnode))]\n                       ((.-willEnter node)))\n                     (doseq [node (filter #(some-> % .-willAppear) (.-children new-vnode))]\n                       ((.-willAppear node))))))\n       (->> children\n            (mapcat #(if (seq? %) % [%]))\n            (map inflate-hiccup)\n            (realize-children fullpath)\n            (mapcat add-comment-node))))))\n"],"x_google_ignoreList":[0]}